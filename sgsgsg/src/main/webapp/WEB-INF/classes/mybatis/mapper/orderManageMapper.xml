<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sgsg.dra.admin.mapper.OrderManageMapper">
	
	<sql id="where-list">
		<choose>
			<when test="schType == 'orderNum' ">
			   ( po.orderNum  = #{kwd} )
			</when>
			<when test="schType == 'invoiceNumber' ">
			   ( invoiceNumber  = #{kwd} )
			</when>
			<when test="schType == 'orderDate' ">
			   ( TO_CHAR(orderDate, 'YYYYMMDD') = #{kwd}
		          OR TO_CHAR(orderDate, 'YYYY-MM-DD') = #{kwd} )
			</when>
			<when test="schType == 'userName'">
			    INSTR(userName, #{kwd}) &gt; 0
			</when>
		</choose>
	</sql>
	
	<!-- 주문 목록 가지고 오기 -->
	<select id="listOrder" parameterType="map" resultType="com.sgsg.dra.domain.Order">
		SELECT PRODUCTORDERNAME, po.ORDERNUM, po.USERID, USERNAME, ISSUE_ID,
			TO_CHAR(ORDERDATE, 'YYYY-MM-DD HH24:MI:SS') ORDERDATE, TOTALMONEY, USEDSAVED,
			DELIVERYCHARGE, PAYMENT, po.ORDERSTATE, ORDERSTATEDATE, CANCELAMOUNT, RECIPIENTNAME,
			po.TEL, po.ZIP, po.ADDR1, po.ADDR2, DESTMEMO, INVOICENUMBER, DELIVERYNUM, DELIVERYNAME
		FROM PRODUCTORDER po
		JOIN MEMBER1 m ON po.USERID = m.USERID
		LEFT OUTER JOIN DELIVERY d ON po.orderNum = d.orderNum
		<where>
			NOT EXISTS (
				SELECT 1
				FROM RETURN_REQUEST rr
				JOIN ORDERDETAIL od ON rr.ORDERDETAILNUM = od.ORDERDETAILNUM
				WHERE od.ORDERNUM = po.ORDERNUM
			)
			<if test="kwd != null and kwd != '' ">
				AND <include refid="where-list"/>
			</if>
		</where>
		ORDER BY ORDERNUM DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="dataCount" parameterType="map" resultType="Integer">
		select nvl(count(*), 0) count
		from PRODUCTORDER po
		JOIN MEMBER1 m ON po.USERID = m.USERID
		LEFT OUTER JOIN DELIVERY d on po.orderNum = d.orderNum
		<where>
			NOT EXISTS (
				SELECT 1
				FROM RETURN_REQUEST rr
				JOIN ORDERDETAIL od ON rr.ORDERDETAILNUM = od.ORDERDETAILNUM
				WHERE od.ORDERNUM = po.ORDERNUM
			)
			<if test="kwd != null and kwd != '' ">
				AND <include refid="where-list"/>
			</if>
		</where>
	</select>
	
	<!-- 주문 정보 -->
	<select id="findById" parameterType="String" resultType="com.sgsg.dra.domain.Order">
		SELECT PRODUCTORDERNAME, po.ORDERNUM, MEMBERIDX, po.USERID, m.USERNAME, ISSUE_ID,
			TO_CHAR(ORDERDATE, 'YYYY-MM-DD HH24:MI:SS') ORDERDATE, TOTALMONEY, USEDSAVED, 
			DELIVERYCHARGE, PAYMENT, po.ORDERSTATE, ORDERSTATEDATE, CANCELAMOUNT, RECIPIENTNAME,
			po.TEL, po.ZIP, po.ADDR1, po.ADDR2, po.DESTMEMO, PAYMETHOD, CARDNAME,
			AUTHNUMBER, AUTHDATE, DELIVERYNAME, INVOICENUMBER, DELIVERYNUM
        FROM PRODUCTORDER po
        LEFT OUTER JOIN MEMBER1 m ON po.USERID = m.USERID
        LEFT OUTER JOIN payDetail pd ON po.orderNum = pd.orderNum
        LEFT OUTER JOIN DELIVERY d on po.orderNum = d.orderNum
        WHERE po.ORDERNUM = #{orderNum}
	</select>
	
	<!-- 주문 상세 정보 -->
	<select id="findByOrderDetails" parameterType="String" resultType="com.sgsg.dra.domain.Order">
		SELECT od.orderNum, od.orderDetailNum, od.qty, od.price, od.salePrice, od.productMoney, od.savedMoney,
			ps.productNum, ps.detailNum, ps.detailNum2, p.productName, p.optionCount,
			d1.optionValue, d2.optionValue optionValue2
		FROM orderDetail od
        JOIN PRODUCTSTOCK ps ON od.STOCKNUM=ps.STOCKNUM
		JOIN PRODUCT p ON ps.productNum = p.productNum
		LEFT OUTER JOIN optionDetail d1 ON ps.detailNum = d1.detailNum
		LEFT OUTER JOIN optionDetail d2 ON ps.detailNum2 = d2.detailNum
		WHERE od.orderNum = #{orderNum}
	</select>
	
	<!-- 배송사 목록 -->
	<select id="selectDeliveryCompanyList" resultType="com.sgsg.dra.domain.Order">
		SELECT DELIVERYNAME, COMPANYNUM
		FROM DELIVERYCOMPANY
	</select>
	
	<!-- 배송 등록 -->
	<insert id="insertDelivery" parameterType="map">
		INSERT INTO DELIVERY(DELIVERYNUM, orderNum, companyNum, DELIVERYNAME, INVOICENUMBER, ORDERSTATE)
			VALUES(DELIVERY_seq.nextval, #{orderNum}, #{companyNum}, #{deliveryName}, #{invoiceNumber}, #{orderState})
	</insert>
	
	<!-- 배송상태 변경 -->
	<update id="updateDeliveryState" parameterType="map">
		update DELIVERY set ORDERSTATE=#{orderState} where DELIVERYNUM = #{deliveryNum}
	</update>
	
	<!-- 주문 상태 변경 -->
	<update id="updateOrderState" parameterType="map">
		update productOrder set ORDERSTATE=#{orderState}, ORDERSTATEDATE=sysdate, CANCELAMOUNT=#{cancelAmount, jdbcType=INTEGER} where orderNum=#{orderNum}
	</update>
	
	<!-- 판매취소 -->
	<!-- 판매취소는 사용자 요청시 인서트? -->
	<insert id="cancelOrder" parameterType="map">
		insert into ORDER_CANCELLATION(orderNum, CANCEL_DATE, CANCEL_REASON, PROCESS_DATE)
		values(#{orderNum}, sysdate, #{cancel_reason, jdbcType=VARCHAR}, sysdate)
	</insert>
	
	<!-- 마지막 포인트 조회 -->
	<select id="findByUserPoint" parameterType="String" resultType="com.sgsg.dra.domain.UserPoint">
		SELECT NUM, CHANGE_POINTS, REASON, CHANGE_DATE, REMAIN_POINTS, ph.USERID
		FROM POINT_HISTORY ph
		left outer join member1 m on m.USERID = ph.USERID
		WHERE MEMBERIDX = #{memberIdx}
		ORDER BY num DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<!-- 판매 취소시 사용한 포인트 돌려주기 -->
	<insert id="updateUsePoint" parameterType="map">
		INSERT INTO POINT_HISTORY (NUM, CHANGE_POINTS, REASON, CHANGE_DATE, REMAIN_POINTS, USERID, orderNum)
		values(POINT_HISTORY_SEQ.NEXTVAL, #{usedSaved}, #{reason}, SYSDATE, #{remain_points}, #{userId}, #{orderNum})
	</insert>
	
	<!-- 재고 돌리기, 상세주문에서 주문번호 가지고 stock 돌려줌 -->
	<update id="cancelProductStock" parameterType="map">
		MERGE INTO PRODUCTSTOCK ps
		USING (
			SELECT od.STOCKNUM, SUM(od.QTY) AS TOTAL_QTY
			FROM ORDERDETAIL od
			WHERE od.ORDERNUM = #{orderNum}
			GROUP BY od.STOCKNUM
		) od
		ON (ps.STOCKNUM = od.STOCKNUM)
		WHEN MATCHED THEN
			UPDATE SET ps.TOTALSTOCK = ps.TOTALSTOCK + od.TOTAL_QTY
	</update>
	
	<select id="selectOrderStateCount" resultType="com.sgsg.dra.domain.Order">
		SELECT orderState, COUNT(*) AS stateCount
		FROM PRODUCTORDER
		GROUP BY orderState
		ORDER by orderState
	</select>
	
	<!-- return_request -->
	<insert id="insertRetrunRequest" parameterType="map">
		INSERT INTO ORDER_CANCELLATION(ORDERNUM, CANCEL_DATE, CANCEL_REASON, PROCESS_DATE)
		VALUES(#{orderNum}, sysdate,  #{cancel_reason, jdbcType=VARCHAR}, sysdate);
	</insert>
	
	<select id="findSavedMoney" parameterType="map" resultType="Integer">
		SELECT SUM(SAVEDMONEY) as SAVEDMONEY FROM ORDERDETAIL WHERE ORDERNUM = #{orderNum}
	</select>
	
	
</mapper>