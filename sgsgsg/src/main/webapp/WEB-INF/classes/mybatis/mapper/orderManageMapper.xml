<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sgsg.dra.admin.mapper.OrderManageMapper">
	
	<sql id="where-list">
		<choose>
			<when test="schType == 'orderNum' ">
			   ( po.orderNum  = #{kwd} )
			</when>
			<when test="schType == 'invoiceNumber' ">
			   ( invoiceNumber  = #{kwd} )
			</when>
			<when test="schType == 'orderDate' ">
			   ( TO_CHAR(orderDate, 'YYYYMMDD') = #{kwd}
		          OR TO_CHAR(orderDate, 'YYYY-MM-DD') = #{kwd} )
			</when>
			<when test="schType == 'userName'">
			    INSTR(userName, #{kwd}) &gt; 0
			</when>
		</choose>
	</sql>
	
	<!-- 주문 목록 가지고 오기 -->
	<select id="listOrder" parameterType="map" resultType="com.sgsg.dra.domain.Order">
		SELECT PRODUCTORDERNAME, ORDERNUM, po.USERID, USERNAME, ISSUE_ID,
			TO_CHAR(ORDERDATE, 'YYYY-MM-DD HH24:MI:SS') ORDERDATE, TOTALMONEY, USEDSAVED,
			DELIVERYCHARGE, PAYMENT, ORDERSTATE, ORDERSTATEDATE, CANCELAMOUNT, RECIPIENTNAME,
			po.TEL, po.ZIP, po.ADDR1, po.ADDR2, DESTMEMO
		FROM PRODUCTORDER po
		JOIN MEMBER1 m ON po.USERID = m.USERID
		<where>
			<if test="kwd != null and kwd != '' ">
                <include refid="where-list"/>
            </if>
		</where>
		ORDER BY ORDERNUM DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<select id="dataCount" parameterType="map" resultType="Integer">
		select nvl(count(*), 0) count
		from PRODUCTORDER po
		JOIN MEMBER1 m ON po.USERID = m.USERID
		<where>
			<if test="kwd != null and kwd != '' ">
                <include refid="where-list"/>
            </if>
		</where>
	</select>
	
	<!-- 주문 정보 -->
	<select id="findById" parameterType="String" resultType="com.sgsg.dra.domain.Order">
		SELECT PRODUCTORDERNAME, po.ORDERNUM, po.USERID, m.USERNAME, ISSUE_ID,
			TO_CHAR(ORDERDATE, 'YYYY-MM-DD HH24:MI:SS') ORDERDATE, TOTALMONEY, USEDSAVED, 
			DELIVERYCHARGE, PAYMENT, ORDERSTATE, ORDERSTATEDATE, CANCELAMOUNT, RECIPIENTNAME,
			po.TEL, po.ZIP, po.ADDR1, po.ADDR2, po.DESTMEMO, PAYMETHOD, CARDNAME,
			AUTHNUMBER, AUTHDATE, DELIVERYNAME, INVOICENUMBER, STATUS_CODE
        FROM PRODUCTORDER po
        LEFT OUTER JOIN MEMBER1 m ON po.USERID = m.USERID
        LEFT OUTER JOIN payDetail pd ON po.orderNum = pd.orderNum
        LEFT OUTER JOIN DELIVERY d on po.orderNum = d.orderNum
        WHERE po.ORDERNUM = #{orderNum}
	</select>
	
	<!-- 주문 상세 정보 -->
	<select id="findByOrderDetails" parameterType="String" resultType="com.sgsg.dra.domain.Order">
		SELECT od.orderNum, od.orderDetailNum, od.qty, od.price, od.salePrice, od.productMoney, od.savedMoney,
			ps.productNum, ps.detailNum, ps.detailNum2, p.productName, p.optionCount,
			d1.optionValue, d2.optionValue optionValue2
		FROM orderDetail od
        JOIN PRODUCTSTOCK ps ON od.STOCKNUM=ps.STOCKNUM
		JOIN PRODUCT p ON ps.productNum = p.productNum
		LEFT OUTER JOIN optionDetail d1 ON ps.detailNum = d1.detailNum
		LEFT OUTER JOIN optionDetail d2 ON ps.detailNum2 = d2.detailNum
		WHERE od.orderNum = #{orderNum}
	</select>
	
	<!-- 배송사 목록 -->
	<select id="selectDeliveryCompanyList" resultType="com.sgsg.dra.domain.Order">
		SELECT DELIVERYNAME, COMPANYNUM
		FROM DELIVERYCOMPANY
	</select>
	
	<!-- 배송 등록 -->
	<insert id="insertDelivery" parameterType="map">
		INSERT INTO DELIVERY(DELIVERYNUM, orderNum, companyNum, DELIVERYNAME, INVOICENUMBER, STATUS_CODE)
			VALUES(DELIVERY_seq.nextval, #{orderNum}, #{companyNum}, #{deliveryName}, #{invoiceNumber}, #{status_code})
	</insert>
	
	<!-- 배송상태 변경 -->
	<update id="updateDeliveryState" parameterType="map">
		update DELIVERY set status_code=#{status_code} where DELIVERYNUM = #{deliveryNum}
	</update>
	
	<!-- 주문 상태 변경 -->
	<update id="updateOrderState" parameterType="map">
		update productOrder set ORDERSTATE=#{orderState}, ORDERSTATEDATE=sysdate, CANCELAMOUNT=#{cancelAmount, jdbcType=INTEGER} where orderNum=#{orderNum}
	</update>
	
	<!-- 판매취소 -->
	<!-- 판매취소는 사용자 요청시 인서트? -->
	<insert id="canceleOrder" >
		insert into ORDER_CANCELLATION(orderNum, CANCEL_DATE, CANCEL_REASON, PROCESS_DATE)
			values(#{orderNum}, #{cancel_date}, #{cancel_reason}, #{process_date})
	</insert>
	
	<!-- 판매 취소시 사용한 포인트 돌려주기 -->
	<insert id="canceleUesdPoint" parameterType="map">
		INSERT INTO POINT_HISTORY (
			NUM, CHANGE_POINTS, REASON, CHANGE_DATE, REMAIN_POINTS, USERID, orderNum
		)
		SELECT
			POINT_HISTORY_SEQ.NEXTVAL,
			-(SELECT CHANGE_POINTS
			 FROM POINT_HISTORY
			 WHERE orderNum = #{orderNum}),
			#{reason},
			SYSDATE,
			COALESCE((
				SELECT REMAIN_POINTS
				FROM POINT_HISTORY
				WHERE USERID = #{userId}
				ORDER BY CHANGE_DATE DESC
				FETCH FIRST 1 ROWS ONLY
			), 0) - (SELECT CHANGE_POINTS
					FROM POINT_HISTORY
					WHERE orderNum = #{orderNum}),
			#{userId},
			#{orderNum}
		FROM DUAL
	</insert>
	
	
</mapper>