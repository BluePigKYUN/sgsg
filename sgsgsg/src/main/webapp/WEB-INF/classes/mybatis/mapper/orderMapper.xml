<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sgsg.dra.mapper.OrderMapper">

	
	<select id="findByMaxOrderNumber" resultType="String">
		SELECT orderNum
		FROM productOrder
		ORDER BY orderDate DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<!-- 주문 추가 -->
	<insert id="insertOrder" parameterType="map">
		INSERT INTO PRODUCTORDER(ORDERNUM, USERID, ISSUE_ID, ORDERDATE, TOTALMONEY, USEDSAVED,
			DELIVERYCHARGE, PAYMENT, ORDERSTATE, RECIPIENTNAME,
			TEL, ZIP, ADDR1, ADDR2, DESTMEMO, PRODUCTORDERNAME)
		VALUES (#{orderNum}, #{userId}, #{issue_id, jdbcType=VARCHAR}, sysdate,
			#{totalMoney},  #{usedSaved}, #{deliveryCharge}, #{payment}, #{orderState}, #{recipientName},
			#{tel}, #{zip}, #{addr1}, #{addr2}, #{destMemo}, #{productOrderName})
	</insert>
	
	<!-- 결제 내역 등록 -->
	<insert id="insertPayDetail" parameterType="com.sgsg.dra.domain.Order">
		INSERT INTO payDetail(orderNum, payMethod, cardName, authNumber, authDate) 
			VALUES (#{orderNum}, #{payMethod}, #{cardName}, #{authNumber}, TO_DATE(#{authDate}, 'YYYY-MM-DD HH24:MI:SS'))
	</insert>
	
	<!-- 주문 상세 추가 -->
	<insert id="insertOrderDetail" parameterType="com.sgsg.dra.domain.Order">
		INSERT INTO ORDERDETAIL(ORDERDETAILNUM, ORDERNUM, QTY, PRICE, SALEPRICE, PRODUCTMONEY,
			SAVEDMONEY, USERDELETE, STOCKNUM)
		VALUES (ORDERDETAIL_seq.nextval, #{orderNum}, #{qty}, #{price}, #{salePrice}, #{productMoney},
			#{savedMoney}, 0, #{stockNum})
	</insert>
	
	<!-- 판매 개수만큼 재고 감소 -->
	<update id="updateProductStock" parameterType="com.sgsg.dra.domain.Order">
		UPDATE productStock SET totalStock = totalStock - #{qty}
		WHERE stockNum = #{stockNum}
	</update>
	
	<!-- 사용자의 모든 주문 조회 -->
	<select id="selectOrder" parameterType="String" resultType="com.sgsg.dra.domain.Order">
		select ORDERNUM, USERID, ISSUE_ID, ORDERDATE, TOTALMONEY, USEDSAVED,
			DELIVERYCHARGE, PAYMENT, ORDERSTATE, ORDERSTATEDATE, CANCELAMOUNT, RECIPIENTNAME,
			TEL, ZIP, ADDR1, ADDR2, DESTMEMO
            from PRODUCTORDER
            where userId = #{userId}
	</select>
	
	<!-- 재고번호로 상품 찾기, 장바구니에서 구매하는 경우 장바구니 순 정렬 -->
	<select id="findByStockNum" parameterType="map" resultType="com.sgsg.dra.domain.Product">
		<if test="mode == 'cart'">
			SELECT c.QTY, to_char(c.REG_DATE, 'yyyy-mm-dd hh24:mi:ss') AS CART_ITEM_REG_DATE,
			s.STOCKNUM, s.TOTALSTOCK,
			p.PRODUCTNUM, p.CATEGORYNUM, p.PRODUCTNAME,
			p.CLASSIFY, p.PRICE, p.DISCOUNTRATE, p.SAVEDMONEY,
			p.DELIVERY, p.OPTIONCOUNT, p.THUMBNAIL, p.PRODUCTSHOW,
			p.REG_DATE AS PRODUCT_REG_DATE, p.UPDATE_DATE,
			LISTAGG(d1.OPTIONVALUE, ', ') WITHIN GROUP (ORDER BY d1.DETAILNUM) AS OPTIONVALUE,
			d1.OPTIONNAME AS OPTIONNAME, d1.DETAILNUM AS DETAILNUM, d1.OPTIONNUM AS OPTIONNUM,
			LISTAGG(d2.OPTIONVALUE, ', ') WITHIN GROUP (ORDER BY d2.DETAILNUM) AS OPTIONVALUE2,
			d2.OPTIONNAME AS OPTIONNAME2, d2.DETAILNUM AS DETAILNUM2, d2.OPTIONNUM AS OPTIONNUM2
		FROM CART_ITEM c
		JOIN PRODUCTSTOCK s ON c.STOCKNUM = s.STOCKNUM
		JOIN (
			SELECT p1.PRODUCTNUM, p1.CATEGORYNUM, p1.PRODUCTNAME,
				p1.CLASSIFY, p1.PRICE, p1.DISCOUNTRATE, p1.SAVEDMONEY,
				p1.DELIVERY, p1.OPTIONCOUNT, p1.THUMBNAIL, p1.PRODUCTSHOW,
				p1.REG_DATE, p1.UPDATE_DATE
			FROM PRODUCT p1
		) p ON s.PRODUCTNUM = p.PRODUCTNUM
		LEFT OUTER JOIN (
			SELECT d1.DETAILNUM, d1.OPTIONVALUE, o1.OPTIONNUM, o1.OPTIONNAME
			FROM optionDetail d1
			JOIN PRODUCT_OPTION o1 ON d1.OPTIONNUM = o1.OPTIONNUM
		) d1 ON s.detailNum = d1.DETAILNUM
		LEFT OUTER JOIN (
			SELECT d2.DETAILNUM, d2.OPTIONVALUE, o2.OPTIONNUM, o2.OPTIONNAME
			FROM optionDetail d2
			JOIN PRODUCT_OPTION o2 ON d2.OPTIONNUM = o2.OPTIONNUM
		) d2 ON s.detailNum2 = d2.DETAILNUM
		WHERE c.USERID = #{userId} AND p.PRODUCTSHOW=1 AND c.STOCKNUM IN 
			<foreach collection="stockNum" item="num" open="(" separator="," close=")">
				#{num}
			</foreach>
		GROUP BY c.QTY, c.REG_DATE,
			s.STOCKNUM, s.TOTALSTOCK,
			p.PRODUCTNUM, p.CATEGORYNUM, p.PRODUCTNAME,
			p.CLASSIFY, p.PRICE, p.DISCOUNTRATE, p.SAVEDMONEY,
			p.DELIVERY, p.OPTIONCOUNT, p.THUMBNAIL, p.PRODUCTSHOW,
			p.REG_DATE, p.UPDATE_DATE, d1.OPTIONNAME, d2.OPTIONNAME,
			d1.DETAILNUM, d2.DETAILNUM, d1.OPTIONNUM, d2.OPTIONNUM
		ORDER BY c.REG_DATE DESC
		</if>
		<if test="mode != 'cart'">
			SELECT s.STOCKNUM, s.PRODUCTNUM, s.TOTALSTOCK, s.DETAILNUM, s.DETAILNUM2,
			    p.PRODUCTNAME, p.PRICE, p.DISCOUNTRATE, p.SAVEDMONEY, p.DELIVERY, p.OPTIONCOUNT,
			    p.THUMBNAIL, o1.OPTIONNAME, d1.OPTIONVALUE, d1.OPTIONNUM,
			    o2.OPTIONNAME AS OPTIONNAME2, d2.OPTIONVALUE AS OPTIONVALUE2, d2.OPTIONNUM AS OPTIONNUM2
			FROM PRODUCTSTOCK s
			JOIN PRODUCT p on s.PRODUCTNUM = p.PRODUCTNUM
			LEFT OUTER JOIN OPTIONDETAIL d1 ON s.DETAILNUM = d1.DETAILNUM
			LEFT OUTER JOIN OPTIONDETAIL d2 on s.DETAILNUM2 = d2.DETAILNUM
			LEFT OUTER JOIN PRODUCT_OPTION o1 on d1.OPTIONNUM = o1.OPTIONNUM
			LEFT OUTER JOIN PRODUCT_OPTION o2 on d2.OPTIONNUM = o2.OPTIONNUM
			WHERE p.PRODUCTSHOW=1 AND s.STOCKNUM IN 
				<foreach collection="stockNum" item="num" open="(" separator="," close=")">
					#{num}
				</foreach>
		</if>
	</select>
	
	<!-- 포인트 사용 -->
	<insert id="insertUserPoint" parameterType="com.sgsg.dra.domain.UserPoint">
		INSERT INTO POINT_HISTORY(NUM, CHANGE_POINTS, REASON, CHANGE_DATE, REMAIN_POINTS, USERID, ORDERNUM)
			values(POINT_HISTORY_seq.nextval, ${change_points}, #{reason}, sysdate, #{remain_points}, #{userId}, #{orderNum, jdbcType=VARCHAR})
	</insert>
	
	<!-- 마지막 포인트 조회 -->
	<select id="findByUserPoint" parameterType="String" resultType="com.sgsg.dra.domain.UserPoint">
		SELECT NUM, NVL(CHANGE_POINTS, 0) CHANGE_POINTS, REASON, CHANGE_DATE, NVL(REMAIN_POINTS, 0) REMAIN_POINTS, USERID
		FROM POINT_HISTORY
		WHERE USERID = #{userId}
		ORDER BY num DESC
		FETCH FIRST 1 ROWS ONLY
	</select>
	
	<!-- 배송지 추가 -->
	<insert id="insertDest" parameterType="com.sgsg.dra.domain.Delivery">
		INSERT INTO MEMBER_DELIVERY(DESTINATIONNUM, RECIPIENTNAME, DEFAULTDEST, TEL, ZIP,
			REG_DATE, MOD_DATE, ADDR1, ADDR2, DESTMEMO, USERID)
		VALUES (member_delivery_seq.nextval, #{recipientName}, #{defaultDest},
			#{tel}, #{zip}, sysdate, sysdate, #{addr1}, #{addr2}, #{destMemo}, #{userId})
	</insert>
	
	<!-- 배송지 중 기본 배송지 검색 또는 insert시 같은 주소가 있는지 검색(할 예정) -->
	<select id="findByDest" parameterType="String" resultType="com.sgsg.dra.domain.Delivery">
		SELECT DESTINATIONNUM, RECIPIENTNAME, DEFAULTDEST, TEL, ZIP, REG_DATE, MOD_DATE,
			ADDR1, ADDR2, DESTMEMO, USERID, NVL(COUNT(*), 0) COUNT
		FROM MEMBER_DELIVERY 
		WHERE USERID = #{userId} AND DEFAULTDEST = 1
		GROUP BY DESTINATIONNUM, RECIPIENTNAME, DEFAULTDEST, TEL, ZIP, REG_DATE, MOD_DATE,
			ADDR1, ADDR2, DESTMEMO, USERID
	</select>
	
	<!-- 사용자의 모든 배송지 출력 -->
	<select id="selectAllDest" parameterType="String" resultType="com.sgsg.dra.domain.Delivery">
		SELECT DESTINATIONNUM, RECIPIENTNAME, DEFAULTDEST, TEL, ZIP, REG_DATE, MOD_DATE,
			ADDR1, ADDR2, DESTMEMO, USERID
			FROM MEMBER_DELIVERY
			WHERE USERID = #{userId}
	</select>
	
	<!-- 사용자가 기본 배송지를 재설정할 경우 다른 배송지를 기본 배송지가 아니게 -->
	<update id="updateDefaultDest" parameterType="String">
		UPDATE MEMBER_DELIVERY SET DEFAULTDEST=0 WHERE USERID = #{userId} AND DEFAULTDEST = 1
	</update>
	
	<!-- 배송지 수정 -->
	<update id="updateDest" parameterType="com.sgsg.dra.domain.Delivery">
		UPDATE MEMBER_DELIVERY SET RECIPIENTNAME=#{recipientName}, DEFAULTDEST=#{defaultDest},
			TEL=#{tel}, ZIP=#{zip}, MOD_DATE=sysdate, ADDR1=#{addr1},
			ADDR2=#{addr2}, DESTMEMO=#{destMemo}
		WHERE DESTINATIONNUM = #{destinationNum}
	</update>
	
	<!-- 배송지 삭제 -->
	<delete id="deleteDest" parameterType="map">
		DELETE FROM MEMBER_DELIVERY WHERE DESTINATIONNUM = #{destinationNum} AND USERID = #{userId}
	</delete>
	
	<!-- 구매자 정보 -->
	<select id="findByOrderUser" parameterType="String" resultType="com.sgsg.dra.domain.Member">
		SELECT m1.memberIdx, membership, m1.userId, userName, tel, zip, addr1, addr2, email
		FROM member1 m1
		JOIN member2 m2 ON m1.userId=m2.userId
		WHERE m1.userId = #{userId} AND enabled != 0
	</select>
	
	

</mapper>