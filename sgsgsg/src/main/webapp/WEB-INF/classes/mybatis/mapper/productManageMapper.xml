<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sgsg.dra.admin.mapper.ProductManageMapper">

<!-- 상품등록 시퀀스 보존용 -->
<select id="productSeq" resultType="Long">
	Select product_seq.NextVal From dual
</select>

<!-- 상품 등록하기 -->
<insert id="insertProduct" parameterType="com.sgsg.dra.admin.domain.ProductManage">
    Insert Into product
    (productNum, CategoryNum, productName, classify, price, 
        discountRate, savedMoney, delivery, optionCount, content, thumbnail, productShow, reg_date, search_Word)
    Values
    (#{productNum}, #{categoryNum}, #{productName}, #{classify}, #{price},
        #{discountRate}, #{savedMoney}, #{delivery}, #{optionCount}, #{content}, #{thumbnail}, #{productShow}, SYSDATE, #{searchWords})
</insert>

<!-- 추가적인 이미지 등록 -->
<insert id="insertProductFile" parameterType="com.sgsg.dra.admin.domain.ProductManage">
		INSERT INTO product_Image(fileNum, img_name, productNum)
		VALUES(PRODUCT_IMAGE_SEQ.NEXTVAL, #{filename}, #{productNum} )
</insert>

<!-- 상품 카테고리 -->
<select id="findByCategory" parameterType="Long" resultType="com.sgsg.dra.admin.domain.ProductManage">
	SELECT categoryNum, categoryName, use, displayNo, parentNum, categoryImage
	FROM PRODUCT_CATEGORY
	WHERE categoryNum = #{categoryNum}
</select>

<!-- 상품 상위 카테고리 목록 -->
<select id="listCategory" resultType="com.sgsg.dra.admin.domain.ProductManage">
	SELECT categoryNum, categoryName, displayno, parent_categorynum as ParentNum, categoryimage, use
	FROM product_Category
	WHERE use = 1 AND parent_categorynum IS NULL
	ORDER BY displayno
</select>

<!-- 상품 하위 카테고리 목록 -->
<select id="listSubCategory" parameterType="Long" resultType="com.sgsg.dra.admin.domain.ProductManage">
	SELECT categoryNum, categoryName, displayno, parent_categorynum as ParentNum, categoryimage, use
	FROM PRODUCT_CATEGORY
	WHERE use = 1 AND parent_categorynum = #{parent_categorynum}
	ORDER BY displayNo
</select>

<!-- 옵션 1, 2 등록용 시퀀스 밸류 보존 -->
<select id="optionSeq" resultType="Long">
	Select PRODUCT_OPTION_SEQ.NEXTVAL From dual
</select>

<!-- 옵션 1 등록 -->
<insert id="insertProductOption" parameterType="com.sgsg.dra.admin.domain.ProductManage">
	INSERT INTO PRODUCT_OPTION (OPTIONNUM, OPTIONNAME, PRODUCTNUM, PARENTNUM)
	VALUES (#{optionNum}, #{optionName}, #{productNum}, #{parentOption, jdbcType=INTEGER})
</insert>

<!-- 옵션 2 등록시 보존용 시퀀스 -->
<select id="detailSeq" resultType="Long">
	Select OPTIONDETAIL_SEQ.NEXTVAL From dual
</select>

<!-- 옵션 2 등록 -->
<insert id="insertOptionDetail" parameterType="com.sgsg.dra.admin.domain.ProductManage">
	INSERT INTO OPTIONDETAIL (DETAILNUM, OPTIONVALUE, OPTIONNUM)
	VALUES (#{detailNum}, #{optionValue}, #{optionNum})
</insert>

<!-- 상품 수정하기 -->
<update id="updateProduct" parameterType="com.sgsg.dra.admin.domain.ProductManage">
	UPDATE product SET categoryNum = #{categoryNum}, productName = #{productName},
		classify = #{classify}, price = #{price}, discountRate = #{discountRate}, savedMoney = #{savedMoney},
		optionCount = #{optionCount}, delivery = #{delivery}, content = #{content}, 
		thumbnail = #{thumbnail}, productShow = #{productShow}, update_date = SYSDATE, search_Word = #{searchWords}
	WHERE productNum = #{productNum}
</update>
	
<!-- 상품 옵션 수정하기 -->
<update id="updateProductOption" parameterType="com.sgsg.dra.admin.domain.ProductManage">
	UPDATE PRODUCT_OPTION SET optionName = #{optionName}
	WHERE optionNum = #{optionNum}
</update>
<!-- 상품 옵션 값 수정하기 -->
<update id="updateOptionDetail" parameterType="com.sgsg.dra.admin.domain.ProductManage">
	UPDATE OPTIONDETAIL SET optionValue = #{optionValue}
	WHERE detailNum = #{detailNum}
</update>

<!-- 상품 리스트 끌고오기(우선은 그냥 다 갖고오게끔)-->
<!-- 검색어 같은 것 구현할 예정 -->
<select id="listProduct" parameterType="map"
    resultType="com.sgsg.dra.admin.domain.ProductManage">
    Select productNum, pc.Parent_categoryNum as ParentNum, p.categoryNum, pc.categoryName, productName, classify, price, discountRate, savedMoney, 
        delivery, optionCount, content, thumbnail, productShow, To_Char(reg_date, 'YYYY-MM-DD') reg_date, To_Char(update_date, 'YYYY-MM-DD') update_date, search_word
    From product p
    Join PRODUCT_CATEGORY pc On p.categoryNum = pc.categoryNum
    <where>
        <if test="kwd != null and kwd != ''">
            (INSTR(productName, #{kwd}) &gt; 0 OR INSTR(search_word, #{kwd}) &gt; 0)
        </if>
        <if test="parentNum != 0">
            AND <include refid="category-search"/>
        </if>
        <if test="productShow != 2">
            AND (productShow = #{productShow})
        </if>
        <if test="priceMin > 0">
            AND price &gt;= #{priceMin}
        </if>
        <if test="priceMax > 0">
            AND price &lt;= #{priceMax}
        </if>
    </where>
    Order By p.productNum DESC
    OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
</select>

<select id="listProductExcel" parameterType="map"
    resultType="com.sgsg.dra.admin.domain.ProductManage">
    Select productNum, pc.Parent_categoryNum as ParentNum, p.categoryNum, pc.categoryName, productName, classify, price, discountRate, savedMoney, 
        delivery, optionCount, content, thumbnail, productShow, To_Char(reg_date, 'YYYY-MM-DD') reg_date, To_Char(update_date, 'YYYY-MM-DD') update_date, search_word
    From product p
    Join PRODUCT_CATEGORY pc On p.categoryNum = pc.categoryNum
    <where>
        <if test="kwd != null and kwd != ''">
            (INSTR(productName, #{kwd}) &gt; 0 OR INSTR(search_word, #{kwd}) &gt; 0)
        </if>
        <if test="parentNum != 0">
            AND <include refid="category-search"/>
        </if>
        <if test="priceMin > 0">
            AND price &gt;= #{priceMin}
        </if>
        <if test="priceMax > 0">
            AND price &lt;= #{priceMax}
        </if>
    </where>
    Order By p.categoryNum DESC, p.productNum ASC 
</select>

<sql id="category-search">
    <if test="parentNum != 0">
        pc.Parent_categoryNum = #{parentNum}
    </if>
    <if test="categoryNum != 0">
        And p.categoryNum = #{categoryNum}
    </if>
</sql>

<select id="listProductFile" parameterType="Long" resultType="com.sgsg.dra.admin.domain.ProductManage">
	SELECT fileNum, productNum, img_name As filename
	FROM PRODUCT_IMAGE
	WHERE productNum = #{productNum}
</select>

<!-- 옵션1, 옵션2 -->
<select id="listProductOption" parameterType="Long" 
	resultType="com.sgsg.dra.admin.domain.ProductManage">
	SELECT optionNum, optionName, parentNum, productNum
	FROM product_Option
	WHERE productNum = #{productNum}
	ORDER BY parentNum NULLS FIRST, parentNum
</select>

<!-- 옵션 상세 정보 -->	
<select id="listOptionDetail" parameterType="Long" 
	resultType="com.sgsg.dra.admin.domain.ProductManage">
	SELECT detailNum, optionNum, optionValue
	FROM OPTIONDETAIL
	WHERE optionNum = #{optionNum}
	ORDER BY detailNum
</select>

<!-- 전체 상품의 개수(TODO: 일반/특가 에 따라 갖고오는거 다르게 구현할 예정)-->
<select id="dataCount" parameterType="map" resultType="Integer">
	SELECT NVL(COUNT(*), 0)
	From product p
	Join PRODUCT_CATEGORY pc On p.categoryNum = pc.categoryNum
	    <where>
        <if test="kwd != null and kwd != ''">
            (INSTR(productName, #{kwd}) &gt; 0 OR INSTR(search_word, #{kwd}) &gt; 0)
        </if>
        <if test="parentNum != 0">
            AND <include refid="category-search"/>
        </if>
        <if test="productShow != 2">
            AND (productShow = #{productShow})
        </if>
        <if test="priceMin > 0">
            AND price &gt;= #{priceMin}
        </if>
        <if test="priceMax > 0">
            AND price &lt;= #{priceMax}
        </if>
    </where>
</select>

<!-- 상품 상세 정보 -->
<!-- 재고등록 이후에 구현해서 LEFT OUTER JOIN 해놔야함 -->
<select id="findById" parameterType="Long" resultType="com.sgsg.dra.admin.domain.ProductManage">
	SELECT p.productNum, p.categoryNum, pc.categoryName, p.productName, p.classify, p.price, p.discountRate, 
		p.savedMoney, p.delivery, p.content, p.optionCount, p.search_Word As searchWords,
		p.thumbnail, p.productShow, p.reg_date, p.update_date
	FROM product p
	JOIN PRODUCT_CATEGORY pc ON p.categoryNum = pc.categoryNum
	WHERE p.productNum = #{productNum}
</select>

<!-- 해당 상품 옵션 전체 가져오기 -->
<select id="findByidOption" parameterType="Long" resultType="com.sgsg.dra.admin.domain.ProductManage">
	Select po.ProductNum, po.parentNum, po.OptionNum, po.OptionName, od.DetailNum, od.OptionValue
	From product_option po
	Join OptionDetail od On po.optionNum = od.optionNum
	Where productNum = #{productNum}
</select>

<delete id="deleteProduct" parameterType="Long">
	DELETE FROM product WHERE productNum = #{productNum}
</delete>

<delete id="deleteProductFile" parameterType="Long">
	DELETE FROM PRODUCT_IMAGE WHERE fileNum = #{fileNum}
</delete>

<delete id="deleteProductOption" parameterType="Long">
	DELETE FROM product_Option WHERE optionNum = #{optionNum}
</delete>

<delete id="deleteOptionDetail" parameterType="Long">
	DELETE FROM OPTIONDETAIL WHERE detailNum = #{detailNum}
</delete>

<delete id="deleteOptionDetail2" parameterType="Long">
	DELETE FROM OPTIONDETAIL WHERE optionNum = #{optionNum}
</delete>

<!-- 상품 재고 -->
<insert id="insertProductStock" parameterType="com.sgsg.dra.admin.domain.ProductStockManage">
	INSERT INTO productStock(stockNum, productNum, detailNum, detailNum2, totalStock)
		VALUES (productStock_seq.NEXTVAL, #{productNum}, 
			#{detailNum, jdbcType=BIGINT}, #{detailNum2, jdbcType=BIGINT},
			#{totalStock})
</insert>

<update id="updateProductStock" parameterType="com.sgsg.dra.admin.domain.ProductStockManage">
	UPDATE productStock SET totalStock = #{totalStock}
	WHERE stockNum = #{stockNum}
</update>

<select id="listProductForStock" parameterType="map" resultType="com.sgsg.dra.admin.domain.ProductManage">
    SELECT 
        p.productNum, pc.Parent_categoryNum as ParentNum, p.categoryNum, pc.categoryName, p.productName, 
        p.classify, p.price, p.discountRate, p.savedMoney, p.delivery, p.optionCount,
        p.thumbnail, p.productShow, TO_CHAR(p.reg_date, 'YYYY-MM-DD') as reg_date, 
        TO_CHAR(p.update_date, 'YYYY-MM-DD') as update_date, p.search_word, 
        NVL(SUM(ps.totalStock), 0) as totalstock
    FROM product p
    JOIN PRODUCT_CATEGORY pc ON p.categoryNum = pc.categoryNum
    LEFT OUTER JOIN productStock ps ON p.productNum = ps.productNum
    <where>
        <if test="kwd != null and kwd != ''">
            (INSTR(p.productName, #{kwd}) &gt; 0 OR INSTR(p.search_word, #{kwd}) &gt; 0)
        </if>
        <if test="parentNum != 0">
            AND <include refid="category-search"/>
        </if>
    </where>
    GROUP BY p.productNum, pc.Parent_categoryNum, p.categoryNum, pc.categoryName, 
        p.productName, p.classify, p.price, p.discountRate, p.savedMoney, 
        p.delivery, p.optionCount, p.thumbnail, p.productShow, 
        TO_CHAR(p.reg_date, 'YYYY-MM-DD'), TO_CHAR(p.update_date, 'YYYY-MM-DD'), p.search_word
    <if test="stockLess != 0 or stockGrater != 0">
        HAVING 
        <if test="stockLess != 0">
            NVL(SUM(ps.totalStock), 0) &lt;= #{stockLess}
        </if>
        <if test="stockLess != 0 and stockGrater != 0">
            AND 
        </if>
        <if test="stockGrater != 0">
            NVL(SUM(ps.totalStock), 0) &gt;= #{stockGrater}
        </if>
    </if>
    ORDER BY p.productNum DESC
    OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
</select>

<select id="listProductForStockAndExcel" parameterType="map" resultType="com.sgsg.dra.admin.domain.ProductManage">
    SELECT 
        p.productNum, pc.Parent_categoryNum as ParentNum, p.categoryNum, pc.categoryName, p.productName, 
        p.classify, p.price, p.discountRate, p.savedMoney, p.delivery, p.optionCount,
        p.thumbnail, p.productShow, TO_CHAR(p.reg_date, 'YYYY-MM-DD') as reg_date, 
        TO_CHAR(p.update_date, 'YYYY-MM-DD') as update_date, p.search_word, 
        NVL(SUM(ps.totalStock), 0) as totalstock
    FROM product p
    JOIN PRODUCT_CATEGORY pc ON p.categoryNum = pc.categoryNum
    LEFT OUTER JOIN productStock ps ON p.productNum = ps.productNum
    GROUP BY p.productNum, pc.Parent_categoryNum, p.categoryNum, pc.categoryName, 
        p.productName, p.classify, p.price, p.discountRate, p.savedMoney, 
        p.delivery, p.optionCount, p.thumbnail, p.productShow, 
        TO_CHAR(p.reg_date, 'YYYY-MM-DD'), TO_CHAR(p.update_date, 'YYYY-MM-DD'), p.search_word
    ORDER BY pc.Parent_categoryNum DESC, p.productNum ASC
</select>

<select id="dataCountStockList" parameterType="map" resultType="Integer">
    SELECT NVL(COUNT(*), 0)
    FROM product p
    JOIN PRODUCT_CATEGORY pc ON p.categoryNum = pc.categoryNum
    LEFT JOIN (
        SELECT productNum, SUM(totalStock) as totalStock
        FROM productStock
        GROUP BY productNum
    ) ps ON p.productNum = ps.productNum
	    <where>
        <if test="kwd != null and kwd != ''">
            (INSTR(productName, #{kwd}) &gt; 0 OR INSTR(search_word, #{kwd}) &gt; 0)
        </if>
        <if test="stockLess != 0">
        	AND NVL(ps.totalStock, 0) &lt;= #{stockLess}
        </if>
        <if test="stockGrater != 0">
        	AND NVL(ps.totalStock, 0) &gt;= #{stockGrater}
        </if>
        <if test="parentNum != 0">
            AND <include refid="category-search"/>
        </if>
    </where>
</select>

<!-- 시도해보기 전 쿼리
<select id="dataCountStockList" parameterType="map" resultType="Integer">
	SELECT NVL(COUNT(*), 0)
	FROM product p
	JOIN PRODUCT_CATEGORY pc ON p.categoryNum = pc.categoryNum
	LEFT JOIN (
	 SELECT productNum, SUM(totalStock) as totalStock
	 FROM productStock
	 GROUP BY productNum
	) ps ON p.productNum = ps.productNum
	    <where>
        <if test="kwd != null and kwd != ''">
            (INSTR(productName, #{kwd}) &gt; 0 OR INSTR(search_word, #{kwd}) &gt; 0)
        </if>
        <if test="stock != 0">
        	AND ps.totalStock &gt;= #{stock}
        </if>
        <if test="parentNum != 0">
            AND <include refid="category-search"/>
        </if>
    </where>
</select>
-->

<!-- 
	SELECT p.*, pc.*, ps.totalStock
	FROM product p
	JOIN PRODUCT_CATEGORY pc ON p.categoryNum = pc.categoryNum
	LEFT JOIN (
	 SELECT productNum, SUM(totalStock) as totalStock
	 FROM productStock
	 GROUP BY productNum
	) ps ON p.productNum = ps.productNum
 -->

<select id="listProductStock" parameterType="map" resultType="com.sgsg.dra.admin.domain.ProductStockManage">
	SELECT p.productNum, p.productName, 
		po1.optionNum, po1.optionName,
		po2.optionNum optionNum2, po2.optionName optionName2,
		d1.detailNum, d1.optionValue, 
		d2.detailNum detailNum2, d2.optionValue optionValue2,
	 	ps.stockNum, NVL(ps.totalStock, 0) totalStock
	FROM product p 
	LEFT OUTER JOIN product_Option po1 ON p.productNum = po1.productNum AND parentNum IS NULL
	LEFT OUTER JOIN product_Option po2 ON po1.optionNum = po2.parentNum
    LEFT OUTER JOIN OPTIONDETAIL d1 ON po1.optionNum = d1.optionNum
    LEFT OUTER JOIN OPTIONDETAIL d2 ON po2.optionNum = d2.optionNum
       <choose>
       	<when test="optionCount == 0">
       		LEFT OUTER JOIN productStock ps ON p.productNum = ps.productNum
       	</when>
       	<when test="optionCount == 1">
       		LEFT OUTER JOIN productStock ps ON d1.detailNum = ps.detailNum
       	</when>
       	<otherwise>
       		LEFT OUTER JOIN productStock ps ON d1.detailNum = ps.detailNum AND d2.detailNum = ps.detailNum2
       	</otherwise>
       </choose>
	WHERE p.productNum = #{productNum}
       ORDER BY detailNum, detailNum2
</select>

</mapper>